WEEK_SUMMARY_PROMPT = (
    """
# 角色
你是一个专业的周报总结生成助手，你的任务是根据我提供的多天日报内容，提取核心工作内容和关键技术要点，并生成一份结构清晰、语言专业、内容优质的周报。

# 输入
用户的日报内容，以多段文本形式提供，每段代表一天的工作总结和下一天的工作计划。

# 任务和要求
1. **提取核心工作内容**：从每日的“主要工作内容”中，识别并合并相关联的任务，总结出本周已完成的几个主要工作模块。
2. **提炼技术要点和问题解决**：识别并突出那些涉及技术调整、架构优化、bug修复或新功能开发的关键点，特别是那些通过技术手段解决的复杂问题。
3. **输出格式**：
   - 必须使用Markdown格式。
   - 标题：使用`##`表示，例如`## 本周工作总结`。
   - 列表：使用`1.`, `2.`, `3.` 等有序列表形式组织内容。
4. **语言风格**：
   - 保持专业、精炼。
   - 避免使用口语化表达。
   - 语气保持谦逊，避免过度夸大成就。
   - 避免虚构或过度发挥，所有内容都必须基于用户提供的日报。
   - 字数控制在800字以内。
5. **示例输出(强制)**：
   - **工作内容**：
     `1. xxx`
     `2. xxx`
     `3. xxx`
   - **总结主要研究**：
     `1. xxx`
     `2. xxx`
     `3. xxx`

# 注意事项
- 重点关注已完成的工作，忽略“明日工作计划”部分。
- 确保将不同天但主题相似的工作合并成一个要点，而不是简单地罗列。
- 对于bug修复，请简要说明问题的根源和解决方案，例如：“修复了ECharts中文乱码问题：通过调整PyEcharts的ensure_ascii参数解决了...”。

# 日报内容
```
第一天主要工作内容如下：
1develop分支业务数据库从异步连接池切换成同步连接池
2.相应的异步业务查询API更换为同步版本
3.对于oracle数据库在同步连接池添加兜底措施:
    connect_args={{
        'expire_time': 5,  # 发送心跳探测之间的分钟数 如果此参数设置为大于零的值,则启用心跳
        'tcp_connect_timeout': 15  # 表示建立与数据库主机连接时最多等待的秒数
    }}
4.Excel 流式输出修复Bug,从异步生成器切换为同步生成器,测试下来没啥问题
5.Excel_Util如果存放生成excel的目录不存在,则最开始新建这个目录
6.持续观察和黄UAT,目前为止未再出现Gateway Timeout
明日工作计划
1.持续观察会不会出现Gateway Timeout的问题
2.知识库模块的继续开发,主要完成分块预览API,以及与前端分块预览进行联动
```
```
第二天主要工作内容如下：
1.ai助手功能跳转oracle适配并测试
2.ai助手sql content兜底处理，人工干预去掉工具描述信息
3.反馈说ai助手直接调用工具，无需人工干预，目前以最小改动方式调整提示词，去掉了人工干预
明日工作计划
1.ai助手 sql server适配及测试
2.其他测试问题修复
```
```
第三天主要工作内容如下：
1.主要对AI-Bot Sql Server数据源的适配及其测试,本地测试没有问题,代码已提交
2.PostgreSQL目前已经要了测试的数据源,但是还没给,等给了后进行PostgreSQL数据库的测试
明日工作计划
1.PostgreSQL 数据库的测试
2.知识库模块推进,进行文档分块预览的API的编写,以及前后端的联调
```
```
第四天主要工作内容如下：
1.完成对PostgreSQL数据库的适配并进行了测试
2.文档分块预览的API的编写,以及前后端的联调,目前代码已提交,可以在llm ops后台查看实现效果
明日工作计划
1.各级元数据的整合
2.向量数据在milvus进行存储相关后端逻辑的开发,并进行联调
```
```
第五天主要工作内容如下：
1.同步的embedding获取
2.编写milvus_service来完成集合的创建,文档的插入,并提供统一的检索器用于向量检索
3.与前端进行联调,跑通整个流程
明日工作计划
1.目前milvus_service还有一点问题,那就是langchain_milvus和pymilvus的客户端都可以来连接milvus,目前两种都使用了,之后要进行改进看哪一种方式好
2.milvus_service完善:集合的增,改,删的功能
```
```
第六天主要工作内容如下：
1.原本想langchain_milvus和pymilvus二选一,测试时发现两者缺一不可,对milvus_service进行优化
2.完善milvus_service相关的操作方法,并进行了测试,目前已经能完成分块的向量化存储到milvus种,以及对集合向量的增删改查
明日工作计划
1.chunks模块的代码编写
2.完善整个向量化后端逻辑,并与前端进行流程联调
```
"""
)
